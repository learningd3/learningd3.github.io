<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learning D3</title>
    <description>Build data visualizations on your own terms</description>
    <link>https://learningd3.com/blog/</link>
    <atom:link href="https://learningd3.com/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 20 Dec 2016 11:30:42 -0600</pubDate>
    <lastBuildDate>Tue, 20 Dec 2016 11:30:42 -0600</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>How to Pick Colors for Your Data Visualizations</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Position is everything, color is difficult - Moritz Stefaner&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Choosing colors for a data visualization is hard.
Do it wrong, and it can lead to confusion and misinterpretation.&lt;/p&gt;

&lt;p&gt;Color can seem like a purely decorative attribute of a data visualization.
Picking colors may seem like a totally subjective matter.&lt;/p&gt;

&lt;p&gt;It isn’t. It’s a skill that you can get better at.&lt;/p&gt;

&lt;h2 id=&quot;what-makes-color-hard&quot;&gt;What makes color hard&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Colors are often misinterpreted.&lt;/strong&gt;
Colors can have different associations in different cultures.
In the U.S. the color red is associated with danger, warnings, and errors.
In China, red symbolizes prosperity and luck.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Colors can be hard to distinguish from one another.&lt;/strong&gt;
If you have colors of similar hue, it can be difficult to tell them apart.
In addition, you might prevent those who are color blind from understanding what you are communicating.&lt;/p&gt;

&lt;p&gt;Use color sparingly, and try to discover creative methods of differentiating or grouping elements. Positioning elements is often a better way of doing this.&lt;/p&gt;

&lt;h2 id=&quot;finding-good-color-palettes&quot;&gt;Finding Good Color Palettes&lt;/h2&gt;
&lt;p&gt;There are lots of good color palette generators. Here are a few that i’ve used:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://colorbrewer2.org/&quot;&gt;Color Brewer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://color.adobe.com/&quot;&gt;Adobe Color&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lolcolors.com/&quot;&gt;lolcolors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.colorhunt.co/&quot;&gt;Colorhunt&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I especially want to highlight Color Brewer. It’s a fantastic resource that allows you to use up to 12 colors from each palette. Many of the beautiful D3.js choropleth maps use Color Brewer.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;fit&quot; src=&quot;/blog/assets/img/posts/color/color-brewer.png&quot; alt=&quot;Photo of Color Brewer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’re interested in exploring these concepts further, there’s a lesson in my D3.js course on design principles.
In the lesson, I cover how to use color and typography in your data visualizations.&lt;/p&gt;

&lt;p&gt;If you’re interested in learning D3.js, you can learn more about the course &lt;a href=&quot;https://learningd3.com/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Dec 2016 00:00:00 -0600</pubDate>
        <link>https://learningd3.com/blog/how-to-pick-colors-for-your-data-visualization/</link>
        <guid isPermaLink="true">https://learningd3.com/blog/how-to-pick-colors-for-your-data-visualization/</guid>
        
        
      </item>
    
      <item>
        <title>Using ES6 with D3.js</title>
        <description>&lt;p&gt;ES6 is an important update to Javascript, and it has some great features that you can start using with your D3.js visualizations.&lt;/p&gt;

&lt;h2 id=&quot;getting-set-up&quot;&gt;Getting set up&lt;/h2&gt;
&lt;p&gt;If your project doesn’t use ES6 already, you’ll have to set up your project to use it. You can use &lt;a href=&quot;https://babeljs.io&quot;&gt;Babel&lt;/a&gt; to compile ES6 to Javascript that works in all the browsers.&lt;/p&gt;

&lt;p&gt;I recommend using the &lt;a href=&quot;https://babeljs.io/docs/usage/cli/&quot;&gt;cli tool&lt;/a&gt; if you are comfortable with the terminal.&lt;/p&gt;

&lt;h2 id=&quot;arrow-functions&quot;&gt;Arrow Functions&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Arrow Functions provide a shorter syntax for writing anonymous functions in JavaScript. If you have one argument you don’t need to include parenthesis. If you you have 0 or 2+ arguments you will need to include parenthesis. Anytime you normally write an anonymous function, you can replace them with the arrow function. One caveat is that Javascript’s &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; might not work the way you expect when using arrow functions. If you need to reference the element inside the function (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;d3.select(this)&lt;/code&gt;) you will need to use a normal anonymous function.&lt;/p&gt;

&lt;h2 id=&quot;let-and-const&quot;&gt;Let and Const&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Instead of using &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; for variables you can be more explicit about the type of variable you want. &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; works the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; but it’s block scoped. If you use it inside an &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement, it won’t be accessible outside the block. &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; is like &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; but once it has been assigned a value it can’t be reassigned.&lt;/p&gt;

&lt;h2 id=&quot;import&quot;&gt;Import&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;d3-scale&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One of the nice things about d3.v4.js is that it is broken up into modules. Because D3 modules don’t export a default object, you’ll need to use this star syntax to import everything in the module (&lt;a href=&quot;https://twitter.com/mbostock/status/806878389663506432&quot;&gt;HT Mike&lt;/a&gt;). Importing D3 as modules is especially useful if you are using D3.js in the context of a larger application.&lt;/p&gt;

&lt;h2 id=&quot;destructuring&quot;&gt;Destructuring&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Destructuring is a useful way of extracting data from objects and arrays. In this example i’m creating a constant named blue, that is assigned to whatever &lt;code class=&quot;highlighter-rouge&quot;&gt;colors.blue&lt;/code&gt; is.&lt;/p&gt;

&lt;h2 id=&quot;method-shorthand&quot;&gt;Method Shorthand&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can abbreviate methods in ES6. Instead of writing an anonymous function that’s assigned to a key, you can put parenthesis and a block statement around a method name.&lt;/p&gt;

&lt;h2 id=&quot;template-strings&quot;&gt;Template Strings&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;.attr(&quot;transform&quot;, `translate(${x}, ${y})`);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can insert javascript variables and expressions into strings with template strings. First, make sure you use the back ticks instead of the single or double quote. Whenever you just need to execute javascript, put a dollar sign with brackets surrounding the variable or expression. These strings can also be multi line!&lt;/p&gt;

&lt;h2 id=&quot;default-parameters&quot;&gt;Default Parameters&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;n/a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can set a parameters default value by adding an equal sign and then the value you want as the default. If the function is called without the parameter, or with the parameter set to &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; the default value will be assigned.&lt;/p&gt;

&lt;p&gt;There’s a lot more to ES6 than what I showed here but if you’re looking to get started, give these examples a try. Once you start using the new syntax, it’s hard to go back!&lt;/p&gt;

&lt;p&gt;If you liked this post, you should check out my full course on D3. You can read more about it below and sign up for a free lesson!&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Dec 2016 00:00:00 -0600</pubDate>
        <link>https://learningd3.com/blog/using-es6-with-d3/</link>
        <guid isPermaLink="true">https://learningd3.com/blog/using-es6-with-d3/</guid>
        
        
      </item>
    
  </channel>
</rss>
