<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learning D3</title>
    <description>Build data visualizations on your own terms</description>
    <link>https://learningd3.com/blog/</link>
    <atom:link href="https://learningd3.com/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 24 Jan 2017 08:52:21 -0800</pubDate>
    <lastBuildDate>Tue, 24 Jan 2017 08:52:21 -0800</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>Creating Generative Art with D3.js</title>
        <description>&lt;p&gt;I recently took a trip to the SFMoma where I came across the work of Sol LeWitt. One of the interesting things about Sol’s work was that he created the rules of his art pieces, but they were executable by anyone. I wanted to see if anyone had recreated Sol’s pieces using D3.js. When I did a quick search I found that &lt;a href=&quot;https://twitter.com/cagrimmett&quot;&gt;Chuck Grimmet&lt;/a&gt; had made some pieces which was really inspiring.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Nice d3js rendition of Sol LeWitt&amp;#39;s Wall Drawing 86 by &lt;a href=&quot;https://twitter.com/cagrimmett&quot;&gt;@cagrimmett&lt;/a&gt; - &lt;a href=&quot;https://t.co/BaU46OxZmc&quot;&gt;https://t.co/BaU46OxZmc&lt;/a&gt; &lt;a href=&quot;https://t.co/WOQZ2M0iOA&quot;&gt;pic.twitter.com/WOQZ2M0iOA&lt;/a&gt;&lt;/p&gt;&amp;mdash; Philip Davis (@philipcdavis) &lt;a href=&quot;https://twitter.com/philipcdavis/status/789256091968245760&quot;&gt;October 21, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;It got me interested in the idea of generative art.
Generative art is not about communicating information.
It’s about making visuals with instructions.&lt;/p&gt;

&lt;h2 id=&quot;recreating-an-art-piece-in-code&quot;&gt;Recreating an art piece, in code.&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;fit&quot; src=&quot;/blog/assets/img/posts/generative-art/heart-original.jpg&quot; alt=&quot;Photo of Heart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I created this heart using illustrator around 8 years ago. It took forever. I wanted to see how difficult it would be to create something similar using D3.js. I was looking for a technique that allowed me to create this effect using any SVG path.&lt;/p&gt;

&lt;p&gt;First, I created a grid of SVG circles and colored them using a scale from color brewer.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I love how easy it is to generate pretty things with &lt;a href=&quot;https://twitter.com/hashtag/d3js?src=hash&quot;&gt;#d3js&lt;/a&gt;. &lt;a href=&quot;https://t.co/m40mQJHRK6&quot;&gt;pic.twitter.com/m40mQJHRK6&lt;/a&gt;&lt;/p&gt;&amp;mdash; Philip Davis (@philipcdavis) &lt;a href=&quot;https://twitter.com/philipcdavis/status/816507173396041728&quot;&gt;January 4, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Next, I imported a SVG path and tried to detect whether the center of a circle was inside the path. I found lots of ways to do this with polygons, but I wasn’t able to find a solution for SVG paths. Thankfully, I found a canvas method called isPointInPath that allowed me to do what I wanted.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;❤️ Getting closer. Canvas has a handy method for detecting if a point is inside a path. Couldn&amp;#39;t find for SVG: &lt;a href=&quot;https://t.co/ckggydyFC6&quot;&gt;https://t.co/ckggydyFC6&lt;/a&gt;&lt;a href=&quot;https://twitter.com/hashtag/d3js?src=hash&quot;&gt;#d3js&lt;/a&gt; &lt;a href=&quot;https://t.co/GpBtuDXPcE&quot;&gt;pic.twitter.com/GpBtuDXPcE&lt;/a&gt;&lt;/p&gt;&amp;mdash; Philip Davis (@philipcdavis) &lt;a href=&quot;https://twitter.com/philipcdavis/status/816845636012081152&quot;&gt;January 5, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;❤️ Next Step is to get this Mitchell&amp;#39;s best candidate example to fill in an arbitrary path. &lt;a href=&quot;https://t.co/cksIDOrpnk&quot;&gt;https://t.co/cksIDOrpnk&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/d3js?src=hash&quot;&gt;#d3js&lt;/a&gt; &lt;a href=&quot;https://t.co/kjC5aqf3VL&quot;&gt;pic.twitter.com/kjC5aqf3VL&lt;/a&gt;&lt;/p&gt;&amp;mdash; Philip Davis (@philipcdavis) &lt;a href=&quot;https://twitter.com/philipcdavis/status/817048601545146368&quot;&gt;January 5, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;This effect was really great on its own. But it’s not what I wanted for this piece. I didn’t want an even grid of circles. I wanted it to look like a human placed the circles.&lt;/p&gt;

&lt;p&gt;I came across &lt;a href=&quot;https://twitter.com/mbostock&quot;&gt;Mike Bostock’s&lt;/a&gt; example of &lt;a href=&quot;https://bl.ocks.org/mbostock/d7bf3bd67d00ed79695b&quot;&gt;Mitchell’s best candidate&lt;/a&gt; in his article on &lt;a href=&quot;https://bost.ocks.org/mike/algorithms/&quot;&gt;visualizing algorithms&lt;/a&gt; and realized it would be the perfect fit for the task. This algorithm takes a number of random coordinates, and then chooses the best candidate based on whatever point is farthest from all the others.&lt;/p&gt;

&lt;p&gt;Using this algorithm, and help from one of Mike’s &lt;a href=&quot;https://bl.ocks.org/mbostock/6224050&quot;&gt;examples&lt;/a&gt; I was able to get my final result.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;fit&quot; src=&quot;/blog/assets/img/posts/generative-art/heart.gif&quot; alt=&quot;Photo of Heart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m happy with it, but there are two problems I would love to have solved.&lt;/p&gt;

&lt;p&gt;The first being the ability to detect whether or not a point is inside a path using SVG. Canvas is fine, but there are certain things I’d like to do with animations that are harder using canvas.&lt;/p&gt;

&lt;p&gt;The second thing would be the ability to prevent circles from escaping the bounds of the path. Right now, i’m only checking the center of the circle to make sure it stays within the path. There’s probably a way to detect that the area of the circle hasn’t escaped the path but I haven’t found it yet.&lt;/p&gt;

&lt;h2 id=&quot;explorations&quot;&gt;Explorations&lt;/h2&gt;
&lt;p&gt;One of the side benefits of working on generative art in D3.js is that you discover new portions of the API. Below i’ve collected some of the things i’ve made this month.&lt;/p&gt;

&lt;figure class=&quot;px0&quot;&gt;
    &lt;img class=&quot;fit&quot; src=&quot;/blog/assets/img/posts/generative-art/ring-of-bars.gif&quot; alt=&quot;custom arc tweening&quot; /&gt;
  &lt;/figure&gt;
&lt;div class=&quot;post-img-description&quot;&gt;Example of Custom Arc Tweening.   
    &lt;a href=&quot;http://bl.ocks.org/philipcdavis/dafa2489338f593c526a8f9978f0dee1&quot;&gt;Live&lt;/a&gt;
    &lt;/div&gt;

&lt;figure class=&quot;px0&quot;&gt;
&lt;img class=&quot;fit&quot; src=&quot;/blog/assets/img/posts/generative-art/circle-tunnel.gif&quot; alt=&quot;transitions example&quot; /&gt;
&lt;/figure&gt;
&lt;div class=&quot;post-img-description&quot;&gt;
  Example of Using D3.js transitions.
  &lt;a href=&quot;http://bl.ocks.org/philipcdavis/b5224a272556fcb2d0c776b7a247ede4&quot;&gt;Live&lt;/a&gt;
&lt;/div&gt;

&lt;figure class=&quot;px0&quot;&gt;
&lt;img class=&quot;fit&quot; src=&quot;/blog/assets/img/posts/generative-art/static.gif&quot; alt=&quot;generating static example&quot; /&gt;
&lt;/figure&gt;
&lt;div class=&quot;post-img-description&quot;&gt;Generating Static&lt;/div&gt;

&lt;figure class=&quot;px0&quot;&gt;
&lt;img class=&quot;fit&quot; src=&quot;/blog/assets/img/posts/generative-art/moire.jpg&quot; alt=&quot;Working with radial lines&quot; /&gt;
&lt;/figure&gt;
&lt;div class=&quot;post-img-description&quot;&gt;Working with Radial Lines.
  &lt;a href=&quot;http://bl.ocks.org/philipcdavis/2b626bdef4133921615a5e4fbb921e70&quot;&gt;Live&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;If you’re interested in learning D3.js, consider enrolling in the full &lt;a href=&quot;https://learningd3.com&quot;&gt;course&lt;/a&gt;. It’s a concise and comprehensive guide to the D3.js library. I’d also love to &lt;a href=&quot;https://twitter.com/philipcdavis&quot;&gt;hear from you&lt;/a&gt; if you have feedback or resources to share.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Jan 2017 00:00:00 -0800</pubDate>
        <link>https://learningd3.com/blog/generative-art/</link>
        <guid isPermaLink="true">https://learningd3.com/blog/generative-art/</guid>
        
        
      </item>
    
      <item>
        <title>D3.js resources to improve your visualizations</title>
        <description>&lt;p&gt;I’ve collected some of my favorite resources that you can use in combination with D3.js to enhance your visualizations and save you time.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;http://d3-legend.susielu.com/&quot;&gt;
  &lt;img class=&quot;fit&quot; src=&quot;/blog/assets/img/posts/d3-resources/d3-legend.jpg&quot; alt=&quot;Photo of D3 Legend&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;http://d3-legend.susielu.com/&quot;&gt;D3 Legend&lt;/a&gt; created by &lt;a href=&quot;https://twitter.com/DataToViz&quot;&gt;Susie Lu&lt;/a&gt; is a nice way to generate legends. If you are sick of building legends over and over again, this is a great resource.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://1wheel.github.io/graph-scroll/&quot;&gt;
  &lt;img class=&quot;fit&quot; src=&quot;/blog/assets/img/posts/d3-resources/graph-scroll.png&quot; alt=&quot;Photo of Graph Scroll&quot; /&gt;
&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;http://1wheel.github.io/graph-scroll/&quot;&gt;Graph Scroll&lt;/a&gt; created by &lt;a href=&quot;https://twitter.com/adamrpearce&quot;&gt;Adam Pearce&lt;/a&gt; makes it easier to build scrolling visualizations like &lt;a href=&quot;http://www.bloomberg.com/graphics/2015-auto-sales/&quot;&gt;this one&lt;/a&gt; on Bloomberg.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://riccardoscalco.github.io/textures/&quot;&gt;
  &lt;img class=&quot;fit&quot; src=&quot;/blog/assets/img/posts/d3-resources/textures.png&quot; alt=&quot;Photo of textures.js&quot; /&gt;
&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://riccardoscalco.github.io/textures/&quot;&gt;Textures.js&lt;/a&gt; created by &lt;a href=&quot;https://twitter.com/eidogram&quot;&gt;Riccardo Scalco&lt;/a&gt; is awesome for a host of reasons. There’s a large variety of textures, a nice API, and also good ideas for how to use them in your visualizations.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Caged/d3-tip&quot;&gt;
  &lt;img class=&quot;fit&quot; src=&quot;/blog/assets/img/posts/d3-resources/d3-tip.png&quot; alt=&quot;Photo of D3 Tooltip&quot; /&gt;
&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://github.com/Caged/d3-tip&quot;&gt;D3.tip&lt;/a&gt; created by &lt;a href=&quot;https://twitter.com/caged&quot;&gt;Justin Palmer&lt;/a&gt; is one of the first D3 plugins I used. You can use this on all sorts of visualizations to provide context and additional information.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://peterbeshai.com/vis/d3-line-chunked/&quot;&gt;
  &lt;img class=&quot;fit&quot; src=&quot;/blog/assets/img/posts/d3-resources/chunked.png&quot; alt=&quot;Photo of D3 Line Chunked&quot; /&gt;
&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;http://peterbeshai.com/vis/d3-line-chunked/&quot;&gt;D3 Line Chunked&lt;/a&gt; created by &lt;a href=&quot;https://twitter.com/pbesh&quot;&gt;Peter Beshai&lt;/a&gt; is a great way to display missing data for your line charts.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
Have any D3.js plugins or resources that you find yourself coming back to?
Let me know on &lt;a href=&quot;http://twitter.com/philipcdavis&quot;&gt;twitter&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2017 00:00:00 -0800</pubDate>
        <link>https://learningd3.com/blog/resources-to-improve-your-visualizations/</link>
        <guid isPermaLink="true">https://learningd3.com/blog/resources-to-improve-your-visualizations/</guid>
        
        
      </item>
    
      <item>
        <title>Onboarding Your Team to use D3.js</title>
        <description>&lt;p&gt;If you work on a large team, one of the hurdles you will run into is getting someone up to speed with team workflows. One reason you might feel nervous about using D3 is the learning curve. The learning curve for D3 is probably given more credit than it’s due, but it is true that learning D3 requires some time. Here are some things you can do to onboard new team members.&lt;/p&gt;

&lt;h2 id=&quot;create-conventions&quot;&gt;Create Conventions&lt;/h2&gt;
&lt;p&gt;Don’t let your new teammate come in blind. Create guidelines and best practices that they can apply when they join. Writing these out will help you understand some of the best practices that otherwise wouldn’t be formally stated. Additionally, guidelines set a precedent that you care about the quality of your team’s code. The guidelines themselves are highly dependent on the larger context of what your team is building, but here are a few  possible questions you may want to anticipate.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How do I build visualizations using the front end framework we are using?&lt;/li&gt;
  &lt;li&gt;Where should our visualization components live?&lt;/li&gt;
  &lt;li&gt;How should team members use D3.js examples? How much copy and paste code is allowed?&lt;/li&gt;
  &lt;li&gt;What’s the process for extending a visualization?&lt;/li&gt;
  &lt;li&gt;What are the reusable components we can use with our visualizations?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;delegate-one-visualization-at-a-time&quot;&gt;Delegate one visualization at a time&lt;/h2&gt;
&lt;p&gt;Getting thrown into a new team with new tools can be pretty daunting. One approach I’ve found to be helpful is to &lt;strong&gt;give recent hires responsibility for one visualization type&lt;/strong&gt;. Once they demonstrate a sufficient level of understanding and ownership you can give another.&lt;/p&gt;

&lt;p&gt;If you pile the responsibility of learning multiple visualizations at once, people will look for easier solutions, often at the expense of D3’s flexibility.&lt;/p&gt;

&lt;h2 id=&quot;invest-into-training&quot;&gt;Invest into Training&lt;/h2&gt;
&lt;p&gt;I’m a big believer that D3 is a skill worth investing into. It’s why I created &lt;a href=&quot;https://www.learningd3.com&quot;&gt;Learning D3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One suggestion for teams is to &lt;strong&gt;have at least one person become the designated trainer&lt;/strong&gt;. The trainers job is to get new hires &lt;strong&gt;up to speed&lt;/strong&gt;, to teach the basics of D3, and assign visualizations as they get started.&lt;/p&gt;

&lt;p&gt;Teaching something is a great way to make sure you understand it yourself, and it allows you to fill in the holes of your understanding. Equipping your team to learn how to teach is going to reap dividends down the line. If they can explain the concepts clearly, you can bet they will be able to solve the hairy problems that pop up when building visualizations.&lt;/p&gt;

&lt;p&gt;If you don’t have someone on your team who can teach D3, consider investing into your teams education. I’ve created a course that’s meant to get you up to speed with D3.js. It’s a no fluff way to learn the library. You can find it &lt;a href=&quot;https://www.learningd3.com&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Jan 2017 00:00:00 -0800</pubDate>
        <link>https://learningd3.com/blog/onboarding-your-team-to-use-d3/</link>
        <guid isPermaLink="true">https://learningd3.com/blog/onboarding-your-team-to-use-d3/</guid>
        
        
      </item>
    
      <item>
        <title>Getting the Most out of the D3.js Documentation</title>
        <description>&lt;p&gt;The D3 docs are one of the best ways to solve a problem you are encountering and learn about areas in D3 that you were unaware of. This post explains the basic conventions that are used in the D3 documentation. Let’s look at three examples from the &lt;a href=&quot;https://github.com/d3/d3/blob/master/API.md&quot;&gt;API&lt;/a&gt;.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
d3.&lt;strong&gt;selectAll&lt;/strong&gt;(&lt;em&gt;selector&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;In this example, the selectAll method is being explained.
Notice that the selectAll method is attached to the &lt;code class=&quot;highlighter-rouge&quot;&gt;d3&lt;/code&gt; namespace. If the method being explained is not
attached to the &lt;code class=&quot;highlighter-rouge&quot;&gt;d3&lt;/code&gt; namespace, the object it is attached to will be specified. The italicized word (&lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt; in this case) is a description of the parameter
passed to the method.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
selection.&lt;strong&gt;property&lt;/strong&gt;(&lt;em&gt;name[, value]&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;While it might look like an array, parameters inside brackets (&lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; in this case) signify an &lt;strong&gt;optional&lt;/strong&gt; parameter. The comma included inside the bracket reinforces that idea.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
d3.&lt;strong&gt;csv&lt;/strong&gt;(&lt;em&gt;url[[, row], callback]&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Here we have a required parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; and two optional parameters &lt;code class=&quot;highlighter-rouge&quot;&gt;accessor&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;callback&lt;/code&gt;. In this case, if you provide two parameters to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.csv&lt;/code&gt; method, they will be the url and the callback. However, if you provide 3 parameters, the second will be the accessor parameter, not the callback parameter.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;understand-whats-actually-happening&quot;&gt;Understand what’s actually happening&lt;/h3&gt;
&lt;p&gt;You will inevitably get stuck as you get better at D3. Get into the habit of going to the docs first. Make sure you understand the purpose of the methods you trying to use. You might be surprised to find that these methods are more powerful then you expected.&lt;/p&gt;

&lt;p&gt;If you’re interested in learning more about D3, I made something for you. It’s a comprehensive and concise course for learning the D3.js library. You can learn more about it &lt;a href=&quot;https://learningd3.com&quot;&gt;here&lt;/a&gt;, or sign up for a free lesson below.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Dec 2016 00:00:00 -0800</pubDate>
        <link>https://learningd3.com/blog/getting-the-most-out-of-the-d3-docs/</link>
        <guid isPermaLink="true">https://learningd3.com/blog/getting-the-most-out-of-the-d3-docs/</guid>
        
        
      </item>
    
      <item>
        <title>How to Pick Colors for Your Data Visualizations</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Position is everything, color is difficult - Moritz Stefaner&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Choosing colors for a data visualization is hard.
Do it wrong, and it can lead to confusion and misinterpretation.&lt;/p&gt;

&lt;p&gt;Color can seem like a purely decorative attribute of a data visualization.
Picking colors may seem like a totally subjective matter.&lt;/p&gt;

&lt;p&gt;It isn’t. It’s a skill that you can get better at.&lt;/p&gt;

&lt;h2 id=&quot;what-makes-color-hard&quot;&gt;What makes color hard&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Colors are often misinterpreted.&lt;/strong&gt;
Colors can have different associations in different cultures.
In the U.S. the color red is associated with danger, warnings, and errors.
In China, red symbolizes prosperity and luck.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Colors can be hard to distinguish from one another.&lt;/strong&gt;
If you have colors of similar hue, it can be difficult to tell them apart.
In addition, you might prevent those who are color blind from understanding what you are communicating.&lt;/p&gt;

&lt;p&gt;Use color sparingly, and try to discover creative methods of differentiating or grouping elements. Positioning elements is often a better way of doing this.&lt;/p&gt;

&lt;h2 id=&quot;finding-good-color-palettes&quot;&gt;Finding Good Color Palettes&lt;/h2&gt;
&lt;p&gt;There are lots of good color palette generators. Here are a few that i’ve used:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://colorbrewer2.org/&quot;&gt;Color Brewer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://color.adobe.com/&quot;&gt;Adobe Color&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lolcolors.com/&quot;&gt;lolcolors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.colorhunt.co/&quot;&gt;Colorhunt&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I especially want to highlight Color Brewer. It’s a fantastic resource that allows you to use up to 12 colors from each palette. Many of the beautiful D3.js choropleth maps use Color Brewer.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;fit&quot; src=&quot;/blog/assets/img/posts/color/color-brewer.png&quot; alt=&quot;Photo of Color Brewer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’re interested in exploring these concepts further, there’s a lesson in my D3.js course on design principles.
In the lesson, I cover how to use color and typography in your data visualizations.&lt;/p&gt;

&lt;p&gt;If you’re interested in learning D3.js, you can learn more about the course &lt;a href=&quot;https://learningd3.com/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Dec 2016 00:00:00 -0800</pubDate>
        <link>https://learningd3.com/blog/how-to-pick-colors-for-your-data-visualization/</link>
        <guid isPermaLink="true">https://learningd3.com/blog/how-to-pick-colors-for-your-data-visualization/</guid>
        
        
      </item>
    
      <item>
        <title>Using ES6 with D3.js</title>
        <description>&lt;p&gt;ES6 is an important update to Javascript, and it has some great features that you can start using with your D3.js visualizations.&lt;/p&gt;

&lt;h2 id=&quot;getting-set-up&quot;&gt;Getting set up&lt;/h2&gt;
&lt;p&gt;If your project doesn’t use ES6 already, you’ll have to set up your project to use it. You can use &lt;a href=&quot;https://babeljs.io&quot;&gt;Babel&lt;/a&gt; to compile ES6 to Javascript that works in all the browsers.&lt;/p&gt;

&lt;p&gt;I recommend using the &lt;a href=&quot;https://babeljs.io/docs/usage/cli/&quot;&gt;cli tool&lt;/a&gt; if you are comfortable with the terminal.&lt;/p&gt;

&lt;h2 id=&quot;arrow-functions&quot;&gt;Arrow Functions&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Arrow Functions provide a shorter syntax for writing anonymous functions in JavaScript. If you have one argument you don’t need to include parenthesis. If you you have 0 or 2+ arguments you will need to include parenthesis. Anytime you normally write an anonymous function, you can replace them with the arrow function. One caveat is that Javascript’s &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; might not work the way you expect when using arrow functions. If you need to reference the element inside the function (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;d3.select(this)&lt;/code&gt;) you will need to use a normal anonymous function.&lt;/p&gt;

&lt;h2 id=&quot;let-and-const&quot;&gt;Let and Const&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Instead of using &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; for variables you can be more explicit about the type of variable you want. &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; works the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; but it’s block scoped. If you use it inside an &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement, it won’t be accessible outside the block. &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; is like &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; but once it has been assigned a value it can’t be reassigned.&lt;/p&gt;

&lt;h2 id=&quot;import&quot;&gt;Import&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;d3-scale&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One of the nice things about d3.v4.js is that it is broken up into modules. Because D3 modules don’t export a default object, you’ll need to use this star syntax to import everything in the module (&lt;a href=&quot;https://twitter.com/mbostock/status/806878389663506432&quot;&gt;HT Mike&lt;/a&gt;). Importing D3 as modules is especially useful if you are using D3.js in the context of a larger application.&lt;/p&gt;

&lt;h2 id=&quot;destructuring&quot;&gt;Destructuring&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Destructuring is a useful way of extracting data from objects and arrays. In this example i’m creating a constant named blue, that is assigned to whatever &lt;code class=&quot;highlighter-rouge&quot;&gt;colors.blue&lt;/code&gt; is.&lt;/p&gt;

&lt;h2 id=&quot;method-shorthand&quot;&gt;Method Shorthand&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can abbreviate methods in ES6. Instead of writing an anonymous function that’s assigned to a key, you can put parenthesis and a block statement around a method name.&lt;/p&gt;

&lt;h2 id=&quot;template-strings&quot;&gt;Template Strings&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;.attr(&quot;transform&quot;, `translate(${x}, ${y})`);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can insert javascript variables and expressions into strings with template strings. First, make sure you use the back ticks instead of the single or double quote. Whenever you just need to execute javascript, put a dollar sign with brackets surrounding the variable or expression. These strings can also be multi line!&lt;/p&gt;

&lt;h2 id=&quot;default-parameters&quot;&gt;Default Parameters&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;n/a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can set a parameters default value by adding an equal sign and then the value you want as the default. If the function is called without the parameter, or with the parameter set to &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; the default value will be assigned.&lt;/p&gt;

&lt;p&gt;There’s a lot more to ES6 than what I showed here but if you’re looking to get started, give these examples a try. Once you start using the new syntax, it’s hard to go back!&lt;/p&gt;

&lt;p&gt;If you liked this post, you should check out my full course on D3. You can read more about it below and sign up for a free lesson!&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Dec 2016 00:00:00 -0800</pubDate>
        <link>https://learningd3.com/blog/using-es6-with-d3/</link>
        <guid isPermaLink="true">https://learningd3.com/blog/using-es6-with-d3/</guid>
        
        
      </item>
    
  </channel>
</rss>
